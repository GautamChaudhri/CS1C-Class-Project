Baseline story point estimate value of one = 1 hrs of development time for a single developer

Docker User Story

#15 As a developer, I can make http requests to an API endpoint to add and remove shapes from a project.

  a) Description:
    Instead of writing directly to a txt or json file using fstream, I can make http requests to an API
        in a docker service to manipulate shape data.
    The docker service should have the following API endpoints:
        * GET /shapes: returns all saved shapes to hydrate the rendering area (user story 3 and 4)
        * GET /shapes/{id}: returns a specific shape to be inspected
        * POST /shapes: adds a new shape to the project (ADMIN ONLY, user story 6)
        * PUT /shapes/{id}: updates the properties of an existing shape (ADMIN ONLY, user story 6)
        * DELETE /shapes/{id}: deletes an existing shape (ADMIN ONLY, user story 6)
        * PUT /shapes/{id}/coordinates: updates the coordinates after a shape is moved by admin (user story 5)
        * GET shapes/sorted-by=id: endpoint for user story 7
        * GET shapes/sorted-by=area: endpoint for user story 8
        * GET shapes/sorted-by=perimeter: endpoint for user story 9
        * PUT shapes/{id}/data: saves all changes between executions (user story 10)

       
  b) Tasks:
    As a developer, I can build a Docker service that exposes all the specified REST API endpoints 
        (GET, POST, PUT, DELETE) for shape manipulation.
	As a developer, I can parse JSON data from incoming HTTP requests to create or update shapes 
        (see user story 3 and 4).
	As a developer, I can enforce admin-only restrictions on shape addition, updates, and deletion 
        (see user story #6).
	As a developer, I can implement coordinate updates for shapes to support “move shape” (see user story #5).
	As a developer, I can handle shape sorting queries by ID, area, and perimeter (see user stories #7, #8, and #9).
    As a developer, I can implement a PUT /shapes/{id}/data endpoint to persist shape data between executions (see user story #10).
	As a developer, I can return meaningful error codes (e.g., 400 Bad Request, 401 Unauthorized) when invalid or 
        unauthorized requests are made.
	As a developer, I can ensure that the application replaces local file I/O with HTTP calls to this Docker service 
        to manage shape data.
       
  c) Tests:
    Verify that GET /shapes returns all stored shapes in JSON format.
	Verify that GET /shapes/{id} returns the correct shape data if it exists, or an appropriate error (e.g., 404) 
        if it does not.
	Verify that POST /shapes successfully creates a new shape when valid data is provided by an admin user, and 
        rejects the request if the user is not an admin.
	Verify that PUT /shapes/{id} updates the shape’s properties only for admin users; the request should fail if 
        the user is not an admin.
	Verify that DELETE /shapes/{id} removes the shape for an admin user, and returns an error for non-admin attempts.
	Verify that PUT /shapes/{id}/coordinates correctly moves the shape and that the updated coordinates are reflected 
        in subsequent GET calls.
	Verify that GET /shapes/sorted-by=id returns shapes sorted by their IDs, GET /shapes/sorted-by=area sorts by area, 
        and GET /shapes/sorted-by=perimeter sorts by perimeter.
    Verify that PUT /shapes/{idd}/data saves changes so they persist between executions.
	Verify that requests with invalid shape data (e.g. missing required fields, negative dimensions, or duplicate IDs) 
        result in an error message and do not affect stored data.
	Verify that all required endpoints respond with the correct status codes (e.g. 200 OK, 400 Bad Request, 
        401 Unauthorized, 404 Not Found).
      
  d) Assignee: Gautam, Tim & Paul
      
  e) Estimation: 30
  f) Priority: 2
  g) Done:
    The Docker service is fully functional with all endpoints implemented (GET, POST, PUT, DELETE).
	Admin-only restrictions are enforced, and the Qt application can’t create, modify, or remove shapes unless the 
        user is authorized (user story #6).
	Moving a shape (user story #5) and sorting shapes (user stories #7, #8, #9) works via the Docker API.
    PUT /shapes/{idd}/data is implemented, ensuring all changes are saved between executions (user story #10).
	All shape data is now read/written through the Docker service rather than local files.
	The tests (above) confirm correct behavior and error handling, ensuring reliability.
	All tasks and test conditions are satisfied.